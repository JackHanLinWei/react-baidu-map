{"version":3,"sources":["../src/CustomOverlay/README.md"],"names":[],"mappings":"0IAAA,OAAe","file":"static/js/142.d148a3b6.chunk.js","sourcesContent":["export default \"CustomOverlay 自定义覆盖物\\n===\\n\\n表示地图上一个图像标注。\\n\\n```jsx\\nimport { CustomOverlay, useCustomOverlay } from '@uiw/react-baidu-map';\\n```\\n\\n### 基本用法\\n\\n<!--DemoStart,bgWhite--> \\n```jsx\\nimport { APILoader, Map, Marker, CustomOverlay } from '@uiw/react-baidu-map';\\n\\nconst Demo = () => {\\n  const [count, setCount] = useState(0);\\n  function markerRef(props) {\\n    if (props && props.customOverlay) {\\n      console.log('CustomOverlay::', props.customOverlay, props.map, props.BMap);\\n    }\\n  }\\n  function handleClick(event) {\\n    event.stopPropagation();\\n    event.preventDefault();\\n    setCount(count + 1);\\n  }\\n  return (\\n    <div style={{ width: '100%', height: '350px' }}>\\n      <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n        <Map widget={['NavigationControl']} zoom={13}>\\n          <Marker position={{ lng: 121.466008, lat: 31.220001 }} />\\n          <CustomOverlay\\n            ref={markerRef}\\n            position={{ lng: 121.466008, lat: 31.220001 }} \\n            style={{ whiteSpace: 'nowrap', transform: `translateX(-50%)` }}\\n          >\\n            <div\\n              style={{ backgroundColor: '#fff', padding: 5, whiteSpace: 'nowrap', transform: `translateX(-50%)` }}\\n            >\\n              <button onClick={handleClick}>点击递增{count}</button>\\n            </div>\\n          </CustomOverlay>\\n          <CustomOverlay position={{ lng: 121.500934, lat: 31.229882 }} zIndex={99}>\\n            <div style={{ backgroundColor: '#fff', padding: 5, borderRadius: 10, whiteSpace: 'nowrap', border: '1px solid #333', userSelect: 'initial' }}>\\n              自定义的覆盖物\\n            </div>\\n          </CustomOverlay>\\n          <CustomOverlay position={{ lng: 121.500934, lat: 31.23088 }}>\\n            <div style={{ backgroundColor: '#fff', padding: 5, borderRadius: 10, whiteSpace: 'nowrap', border: '1px solid #333' }}>\\n              自定义的覆盖物，第二个\\n            </div>\\n          </CustomOverlay>\\n        </Map>\\n      </APILoader>\\n    </div>\\n  );\\n};\\nReactDOM.render(<Demo />, _mount_);\\n```\\n<!--End-->\\n\\n### 使用 hooks\\n\\n`portal`, `setPortal`, `customOverlay`, `setCustomOverlay`\\n\\n<!--DemoStart,bgWhite--> \\n```jsx\\nimport { useRef, useEffect, useState } from 'react';\\nimport { Map, APILoader, useMap, useMarker, useCustomOverlay } from '@uiw/react-baidu-map';\\n\\nfunction usePrevious(value) {\\n  const ref = useRef();\\n  useEffect(() => {\\n    ref.current = value;\\n  });\\n  return ref.current;\\n}\\n\\nconst Example = () => {\\n  const divElm = useRef();\\n  const [count, setCount] = useState(0);\\n  const { setContainer, map } = useMap({\\n    zoom: 13,\\n    enableScrollWheelZoom: true,\\n    widget: ['GeolocationControl', 'NavigationControl']\\n  });\\n  useMarker({ map, position: { lng: 121.466008, lat: 31.220001 } });\\n\\n  function handleClick(event) {\\n    event.stopPropagation();\\n    event.preventDefault();\\n    setCount(count + 1);\\n  }\\n  const { portal } = useCustomOverlay({\\n    map,\\n    position: { lng: 121.466008, lat: 31.220001 },\\n    children: (\\n      <div style={{ backgroundColor: '#fff', padding: 5, whiteSpace: 'nowrap', transform: `translateX(-50%)` }}>\\n        <button onClick={handleClick}>自定义的覆盖物{count}</button>\\n      </div>\\n    ),\\n  });\\n  useEffect(() => {\\n    if (divElm.current && !map) {\\n      setContainer(divElm.current);\\n    }\\n  });\\n\\n  return (\\n    <>\\n      <div ref={divElm} style={{ height: '100%' }} />\\n      {portal}\\n    </>\\n  )\\n}\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%', height: '300px' }}>\\n    <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n      <Example />\\n    </APILoader>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n<!--End-->\\n\\n### Props\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n| ----- | ----- | ----- | ----- |\\n| visiable | 覆盖物是否可见。 | `boolean` | - |\\n| strokeColor |  折线颜色 | String | - |\\n| strokeWeight |  折线的宽度，以像素为单位 | Number | - |\\n| strokeOpacity |  折线的透明度，取值范围0 - 1 | Number | - |\\n| strokeStyle |  折线的样式，solid或dashed | String | - |\\n| enableMassClear |  是否在调用map.clearOverlays清除此覆盖物，默认为true | Boolean | - |\\n| enableEditing |  是否启用线编辑，默认为false | Boolean | - |\\n| enableClicking |  是否响应点击事件，默认为true | Boolean | - |\\n| icons | 配置贴合折线的图标 | IconSequence[] | - |\""],"sourceRoot":""}